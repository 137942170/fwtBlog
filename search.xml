<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[【ES6】var、let、const的区别]]></title>
    <url>%2FfwtBlog%2F2019%2F08%2F20%2F%E3%80%90ES6%E3%80%91var%E3%80%81let%E3%80%81const%E7%9A%84%E5%8C%BA%E5%88%AB%2F</url>
    <content type="text"><![CDATA[一、块级作用域ES5 中作用域有：全局作用域、函数作用域。没有块作用域的概念。ES6 中新增了块级作用域。块作用域由 { } 包括，if语句和 for语句里面的{ }也属于块作用域。 1234567891011121314151617181920212223242526272829&lt;script type=&quot;text/javascript&quot;&gt; &#123; var a = 1; console.log(a); // 1 &#125; console.log(a); // 1 // 通过var定义的变量可以跨块作用域访问到。 (function A() &#123; var b = 2; console.log(b); // 2 &#125;)(); // console.log(b); // 报错， // 可见，通过var定义的变量不能跨函数作用域访问到 if(true) &#123; var c = 3; &#125; console.log(c); // 3 for(var i = 0; i &lt; 4; i ++) &#123; var d = 5; &#125;; console.log(i); // 4 (循环结束i已经是4，所以此处i为4) console.log(d); // 5 // if语句和for语句中用var定义的变量可以在外面访问到， // 可见，if语句和for语句属于块作用域，不属于函数作用域。&lt;/script&gt; 二、var、let、const的区别1、var定义的变量，没有块的概念，可以跨块访问, 不能跨函数访问。 2、let定义的变量，只能在块作用域里访问，不能跨块访问，也不能跨函数访问。 3、const用来定义常量，使用时必须初始化(即必须赋值)，只能在块作用域里访问，而且不能修改。1234567891011121314151617181920212223242526272829303132333435&lt;script type=&quot;text/javascript&quot;&gt; // 块作用域 &#123; var a = 1; let b = 2; const c = 3; // c = 4; // 报错 var aa; let bb; // const cc; // 报错 console.log(a); // 1 console.log(b); // 2 console.log(c); // 3 console.log(aa); // undefined console.log(bb); // undefined &#125; console.log(a); // 1 // console.log(b); // 报错 // console.log(c); // 报错 // 函数作用域 (function A() &#123; var d = 5; let e = 6; const f = 7; console.log(d); // 5 console.log(e); // 6 console.log(f); // 7 &#125;)(); // console.log(d); // 报错 // console.log(e); // 报错 // console.log(f); // 报错&lt;/script&gt; 三、const定义的对象属性是否可以改变上面说到 const 是不能修改的，于是很痛快的说不能，但是回来实际测试后发现错了，在此记录一下 12345678const person = &#123; name : &apos;jiuke&apos;, sex : &apos;男&apos;&#125;person.name = &apos;test&apos;console.log(person.name) 运行上述代码，发现person对象的name属性确实被修改了，这是怎么回事呢？ 因为对象是引用类型的，person中保存的仅是对象的指针，这就意味着，const仅保证指针不发生改变，修改对象的属性不会改变对象的指针，所以是被允许的。也就是说const定义的引用类型只要指针不发生改变，其他的不论如何改变都是允许的。 然后我们试着修改一下指针，让person指向一个新对象，果然报错 123456789const person = &#123;name : &apos;jiuke&apos;,sex : &apos;男&apos;&#125;person = &#123;name : &apos;test&apos;,sex : &apos;男&apos;&#125;]]></content>
      <categories>
        <category>Es6</category>
      </categories>
      <tags>
        <tag>8月</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[整理的前端基础知识]]></title>
    <url>%2FfwtBlog%2F2019%2F07%2F31%2F%E6%95%B4%E7%90%86%E7%9A%84%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%2F</url>
    <content type="text"><![CDATA[前端基础知识什么是一个Web服务器？]]></content>
  </entry>
  <entry>
    <title><![CDATA[XSS 与 CSRF 两种跨站攻击]]></title>
    <url>%2FfwtBlog%2F2019%2F07%2F18%2FXSS-%E4%B8%8E-CSRF-%E4%B8%A4%E7%A7%8D%E8%B7%A8%E7%AB%99%E6%94%BB%E5%87%BB%2F</url>
    <content type="text"><![CDATA[https://blog.tonyseek.com/post/introduce-to-xss-and-csrf/]]></content>
      <tags>
        <tag>浏览器</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第5期:(5)JavaScript基础语法]]></title>
    <url>%2FfwtBlog%2F2019%2F07%2F12%2F%E7%AC%AC5%E6%9C%9F-5-JavaScript%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[第4期:(4)正则表达式]]></title>
    <url>%2FfwtBlog%2F2019%2F07%2F12%2F%E7%AC%AC4%E6%9C%9F-4-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[正则表达式首先使用一个正则表达式字面量，其由包含在斜杠之间的模式组成: 1234567/* /pattern/flags*/const regex = /ab+c/;const regex = /^[a-zA-Z]+[0-9]*\W?_$/gi; 在加载脚本后，正则表达式字面值提供正则表达式的编译。当正则表达式保持不变时，使用此方法可获得更好的性能。或者调用RegExp对象的构造函数，如下所示： 123456789/* new RegExp(pattern [, flags])*/let regex = new RegExp(&quot;ab+c&quot;);let regex = new RegExp(/^[a-zA-Z]+[0-9]*\W?_$/, &quot;gi&quot;);let regex = new RegExp(&quot;^[a-zA-Z]+[0-9]*\\W?_$&quot;, &quot;gi&quot;); 使用构造函数提供正则表达式的运行时编译。使用构造函数，当你知道正则表达式模式将会改变，或者你不知道模式，并从另一个来源，如用户输入。]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>正则</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第3期:(3)hexo部署多设备同步管理]]></title>
    <url>%2FfwtBlog%2F2019%2F07%2F02%2F%E7%AC%AC3%E6%9C%9F-3-hexo%E9%83%A8%E7%BD%B2%E5%A4%9A%E8%AE%BE%E5%A4%87%E5%90%8C%E6%AD%A5%E7%AE%A1%E7%90%86%2F</url>
    <content type="text"><![CDATA[一、hexo部署多设备同步管理对于很多已经把项目部署到github来说已经可以发表文章了，但是想要执行多台电脑同时写文章并且操作还是有很多坑，看了网上很多文章总结下来的，一些坑 环境配置 安装 hexo 安装 Node 安装 git 这个不废话直接跳过 创建分支这个其实就是咱们正常使用github创建项目的流程了，首先咱们要确定的是就是要有两个分支，master 和 hexo, hexo 生成的静态博客文件都是上传到GitHub上的, 且默认放在 master 分支上, 而一些相关的配置文件都在本地,所以首先我们要创建hexo分支并且设置hexo为默认分支(更换电脑是直接 git clone hexo ) 切换到该hexo分支，并在该仓库-&gt;Settings-&gt;Branches-&gt;Default branch中将默认分支设为hexo，save保存 二、上传hexo源文件到服务器克隆hexo分支 在hexo分支创建完成以后，克隆hexo到本地，然后在命令行中执行,查看新建的分支为hexo 12$ git branch*hexo 上传部署文件 将本地博客的部署文件（Hexo目录下的全部文件）全部拷贝进刚clone的文件目录中去，需要将插件重新安装一遍 123456789101112131415npm install hexo-generator-index --savenpm install hexo-generator-archive --savenpm install hexo-generator-category --savenpm install hexo-generator-tag --savenpm install hexo-server --savenpm install hexo-deployer-git --savenpm install hexo-deployer-heroku --savenpm install hexo-deployer-rsync --savenpm install hexo-deployer-openshift --savenpm install hexo-renderer-marked@0.2 --savenpm install hexo-renderer-stylus@0.2 --savenpm install hexo-generator-feed@1 --savenpm install hexo-generator-sitemap@1 --savenpm install hexo-generator-search --savenpm install hexo-generator-searchdb --save 最后文件全部提交到Hexo分支 提交时注意事项 如果themes目录中主题中含有主题的.git文件，直接删除 最后用终端或者管理工具将所有文件提交到hexo分支 另外需要说明的是同步到其他电脑时需要将新电脑的生成的ssh key添加到GitHub账户上 master分支和hexo分支各自保存着一个版本，master分支用于保存博客静态资源，提供博客页面供人访问；hexo分支用于备份博客部署文件，供自己维护更新，两者在一个GitHub仓库内也不会有任何冲突 本文参考出处]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>7月</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第2期:(2)hexo标签插件的基础操作]]></title>
    <url>%2FfwtBlog%2F2019%2F07%2F01%2F%E7%AC%AC2%E6%9C%9F-2-hexo%E6%A0%87%E7%AD%BE%E6%8F%92%E4%BB%B6%E7%9A%84%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[hexo标签插件的基础操作一、引用块1、普通输出小时候枕头上都是口水，长大以后枕头上都是泪水，小时候微笑是一种心情，长大后微笑是一种表情，小时候哭着哭着就笑了，长大后笑着笑着就哭了我们终于到了小时候最羡慕的年纪，但却没能成为小时候最想成为的人 2、引用书上的句子小时候枕头上都是口水，长大以后枕头上都是泪水，小时候微笑是一种心情，长大后微笑是一种表情，小时候哭着哭着就笑了，长大后笑着笑着就哭了我们终于到了小时候最羡慕的年纪，但却没能成为小时候最想成为的人 fwtFeng Feng 3、引用 TwitterNEW: DevDocs now comes with syntax highlighting. http://devdocs.io @DevDocstwitter.com/devdocs/status/356095192085962752 4、引用网络上的文章小时候枕头上都是口水，长大以后枕头上都是泪水，小时候微笑是一种心情，长大后微笑是一种表情，小时候哭着哭着就笑了，长大后笑着笑着就哭了我们终于到了小时候最羡慕的年纪，但却没能成为小时候最想成为的人 Seth GodinWelcome to Island Marketing 二、代码块1、普通代码块1alert(&apos;Hello javascript!&apos;); 2、指定语言1[rectangle setX: 10 y: 10 width: 20 height: 20]; 3、附加内容Array.map1array.map(callback[, thisArg]) 4、附加网址_.compactUnderscore.js12_.compact([0, 1, false, 2, &apos;&apos;, 3]);=&gt; [1, 2, 3] 三、反引号代码块由于此处加载大量网址 暂且不做示例1、Pull Quote 引用123&#123;% pullquote [class] %&#125;content&#123;% endpullquote %&#125; 2、jsFiddle1&#123;% jsfiddle shorttag [tabs] [skin] [width] [height] %&#125; 3、Gist1&#123;% gist gist_id [filename] %&#125; 4、iframe1&#123;% iframe url [width] [height] %&#125; 5、Image1&#123;% img [class names] /path/to/image [width] [height] [title text [alt text]] %&#125; 6、Link1&#123;% link text url [external] [title] %&#125; 7、Include Code1&#123;% include_code [title] [lang:language] path/to/file %&#125; 8、Youtube1&#123;% youtube video_id %&#125; 9、Vimeo1&#123;% vimeo video_id %&#125; 四、引用文章12&#123;% post_path slug %&#125;&#123;% post_link slug [title] %&#125; 五、引用资源123&#123;% asset_path slug %&#125;&#123;% asset_img slug [title] %&#125;&#123;% asset_link slug [title] %&#125; 六、Raw123&#123;% raw %&#125;content&#123;% endraw %&#125;]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>md语法</tag>
        <tag>7月</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第1期:(1)hexo常用命令及markdown基础语法]]></title>
    <url>%2FfwtBlog%2F2019%2F06%2F24%2Fmarkdown%EF%BC%88md%EF%BC%89%E6%96%87%E4%BB%B6%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%B8%B8%E7%94%A8%E7%BC%96%E8%BE%91%E8%AF%AD%E6%B3%95%2F</url>
    <content type="text"><![CDATA[hexo常用命令1、分段:两个回车:1234 一个人会落泪，是因为痛；一个人之所以痛，是因为在乎；一个人之所以在乎，是因为有感觉； 一个人之所以有感觉，仅因为你是一个人！所以，你有感觉，在乎，痛过，落泪了，说明你是完整的一个人。难过的时候，原谅自己，你只不过是一个人而已，没必要把自己看的这么坚不可摧。 2、换行 两个空格 + 回车 :12 一个人之所以有感觉，仅因为你是一个人！所以，你有感觉，在乎，痛过，落泪了，说明你是完整的一个人。 难过的时候，原谅自己，你只不过是一个人而已，没必要把自己看的这么坚不可摧。 3、标题 # ~ ###### 井号的个数表示几级标题，即Markdown可以表示一级标题到六级标题:H2: 一个人之所以有感觉，仅因为你是一个人！H3: 一个人之所以有感觉，仅因为你是一个人！H4: 一个人之所以有感觉，仅因为你是一个人！H5: 一个人之所以有感觉，仅因为你是一个人！H6: 一个人之所以有感觉，仅因为你是一个人！4、引用 &gt;: 一个人之所以有感觉，仅因为你是一个人！ 5、列表 * ， + ， - ， 1. ，选其中之一，注意后面有个空格: The reason why a person feels is because you are a person! The reason why a person feels is because you are a person! The reason why a person feels is because you are a person! The reason why a person feels is because you are a person! The reason why a person feels is because you are a person! The reason why a person feels is because you are a person! 6、代码区块 四个空格 开头:1The reason why a person feels is because you are a person! 7、链接:[文字](链接地址) 8、图片:![](图片地址) //图片地址可以是本地路劲，也可以是网络地址 9、强调:字体删除字体删除字体删除字体删除字体删除 10、代码:1The reason why a person feels is because you are a person! 11、字体及颜色用法: 我是黑体字我是黑体字我是微软雅黑我是华文彩云黑体nullgray 12、代码段:The reason why a person feels is because you are a person! 13、JavaScript 示例:123456789/*** nth element in the fibonacci series.*/function fib(n) &#123; var a = 1, b = 1; return a;&#125;document.write(fib(10)); 14、表格 项目 价格 数量 计算机 $1600 5 手机 $12 12 管线 $1 234]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>md语法</tag>
        <tag>6月</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用github pages服务搭建博客的好处]]></title>
    <url>%2FfwtBlog%2F2019%2F06%2F24%2Ffirst-myblog%2F</url>
    <content type="text"><![CDATA[前言 使用github pages服务搭建博客的好处有： 1. 全是静态文件，访问速度快； 2. 免费方便，不用花一分钱就可以搭建一个自由的个人博客，不需要服务器不需要后台； 3. 可以随意绑定自己的域名，不仔细看的话根本看不出来你的网站是基于github的； &lt;!--more--&gt; 4. 数据绝对安全，基于github的版本管理，想恢复到哪个历史版本都行； 5. 博客内容可以轻松打包、转移、发布到其它平台； 6. 等等；]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>6月</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2FfwtBlog%2F2019%2F06%2F20%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
